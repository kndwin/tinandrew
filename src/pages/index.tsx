import { type NextPage } from "next";
import Head from "next/head";
import {
  type FieldError,
  FormProvider,
  useForm,
  useFormContext,
} from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { match } from "ts-pattern";
import { type HTMLProps, useState, Suspense, useRef } from "react";
import ReactConfetti from "react-confetti";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Stage } from "@react-three/drei";

import { api } from "~/utils/api";
import { styled } from "~/utils/variant";
import { useViewportSize } from "~/hooks";
import { TinaModel } from "~/modules/models";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Tina and Andrew</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen max-w-5xl flex-col items-center px-4 py-8">
        <h1 className="text-center font-serif text-4xl text-rose-900">
          welcome to tina and andrew!
        </h1>
        <Viewer />
        <div className="mt-20 flex w-full items-center justify-center">
          <FormRSVP />
        </div>
      </main>
    </>
  );
};

const Viewer = () => {
  const tinaModelRef = useRef(null);
  return (
    <Canvas
      className="my-12 flex w-full items-center justify-center rounded-xl border border-slate-900"
      style={{ height: "30em" }}
      camera={{ position: [0, 1, 3] }}
    >
      <Suspense fallback={null}>
        <spotLight
          position={[10, 10, 10]}
          angle={0.3}
          penumbra={1}
          shadow-mapSize={[512, 512]}
          castShadow
          intensity={1}
        />
        <TinaModel ref={tinaModelRef} position={[0, -1, 0]} />
      </Suspense>
      <OrbitControls ref={tinaModelRef} />
    </Canvas>
  );
};

export default Home;

export const createRSVPSchema = z.object({
  fullName: z.string().min(1),
  email: z.string().email(),
  attending: z.enum(["Maybe", "No", "Yes"]),
  allergies: z.string(),
});

type FormSchema = z.infer<typeof createRSVPSchema>;

const FormRSVP = () => {
  const [confetti, setConfetti] = useState(false);
  const methods = useForm<FormSchema>({
    resolver: zodResolver(createRSVPSchema),
  });

  const {
    handleSubmit,
    register,
    formState: { errors },
  } = methods;

  const createRSVPMutation = api.notion.createRSVP.useMutation();

  const onSubmit = handleSubmit((data) => {
    createRSVPMutation.mutate(data, {
      onSuccess: () => {
        setConfetti(true);
      },
    });
  });

  const { width, height } = useViewportSize();

  return (
    <FormProvider {...methods}>
      <form
        className="flex h-[20em] w-full max-w-md flex-col gap-8"
        onSubmit={onSubmit}
      >
        <div className="flex flex-col gap-4">
          <FormTextField
            label="Full Name"
            name="fullName"
            error={errors.fullName}
          />
          <FormTextField label="Email" name="email" error={errors.email} />
          <div className="flex flex-col gap-2">
            <StyledLabel>Attending</StyledLabel>
            <select
              {...register("attending")}
              defaultValue={"Yes"}
              className="w-fit appearance-none rounded border border-gray-300 px-2 py-1"
            >
              <option value="Yes">Yes</option>
              <option value="No">No</option>
              <option value="Maybe">Maybe</option>
            </select>
            {errors.attending && (
              <Card type="error" message={errors.attending.message} />
            )}
          </div>
          <div className="flex flex-col gap-2">
            <StyledLabel>Allergies</StyledLabel>
            <textarea
              {...register("allergies")}
              className="rounded border border-gray-300 px-2 py-1"
              defaultValue={"N/A"}
            />
            {errors.allergies && (
              <Card type="error" message={errors.allergies.message} />
            )}
          </div>
        </div>
        <button
          type="submit"
          disabled={!createRSVPMutation.isIdle}
          className="mx-auto w-fit rounded bg-black px-4 py-2 text-white"
        >
          {match(createRSVPMutation.status)
            .with("loading", () => "Submitting")
            .with("success", () => "Done!")
            .otherwise(() => "RSVP")}
        </button>
        {createRSVPMutation.isSuccess && (
          <Card type="success" message={"ðŸŽ‰ Yay! You've been added"} />
        )}
        {createRSVPMutation.isError && (
          <Card type="error" message={"ðŸ˜­ something went wrong!"} />
        )}
      </form>
      <ReactConfetti
        recycle={false}
        run={confetti}
        width={width}
        height={height}
      />
    </FormProvider>
  );
};

type FormFieldProps = {
  label: string;
  name: keyof FormSchema;
  error?: FieldError;
};

const FormTextField = ({ label, name, error }: FormFieldProps) => {
  return (
    <div className="flex flex-col gap-2">
      <StyledLabel htmlFor={name}>{label}</StyledLabel>
      <StyledInput id={name} />
      {error && <Card type="error" message={error.message} />}
    </div>
  );
};

type CardProps = {
  message?: string;
  type: "success" | "error";
};

const Card = ({ message, type }: CardProps) => {
  return (
    <StyledCardContainer color={type}>
      <StyledCardText color={type}>{message}</StyledCardText>
    </StyledCardContainer>
  );
};

const StyledCardContainer = styled("div", "rounded p-4", {
  variants: {
    color: {
      success: "bg-green-200",
      error: "bg-red-200",
    },
  },
  defaultVariants: {
    color: "success",
  },
});
const StyledCardText = styled("p", "text-sm", {
  variants: {
    color: {
      success: "text-green-900",
      error: "text-red-900",
    },
  },
  defaultVariants: {
    color: "success",
  },
});

const StyledLabel = styled("label", "text-sm font-bold");

const StyledInput = ({
  id,
  ...props
}: HTMLProps<HTMLInputElement> & { id: keyof FormSchema }) => {
  const { register } = useFormContext();
  return (
    <input
      {...register(id)}
      {...props}
      className="rounded border border-gray-300 py-1 px-2"
    />
  );
};
